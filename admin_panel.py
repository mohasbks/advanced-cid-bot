"""
Admin panel for Advanced CID Telegram Bot
Provides comprehensive admin controls and statistics
"""

import logging
from typing import List, Dict, Optional, Tuple
from datetime import datetime, timedelta
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler

from database.database import db
from database.models import User, Transaction, Voucher, CIDRequest, AdminLog
from services.voucher_service import voucher_service
from services.package_service import package_service
from services.payment_service import payment_service
from config import config

logger = logging.getLogger(__name__)

class AdminPanel:
    """Admin panel for bot management"""
    
    def __init__(self, database=None):
        self.admin_ids = config.telegram.admin_ids
        self.db = database or db
    
    def is_admin(self, user_id: int) -> bool:
        """Check if user is admin"""
        return user_id in self.admin_ids
    
    def get_main_admin_panel_text(self) -> str:
        """Get main admin panel text"""
        stats = self.get_system_statistics()
        
        if "error" in stats:
            return f"๐ง **ููุญุฉ ุงูุฅุฏุงุฑุฉ**\n\nโ ุฎุทุฃ ูู ุฌูุจ ุงูุฅุญุตุงุฆูุงุช: {stats['error']}"
        
        return f"""๐ง **ููุญุฉ ุงูุฅุฏุงุฑุฉ ุงููุชูุฏูุฉ**
โโโโโโโโโโโโโโโโโโโโโ

๐ **ูุธุฑุฉ ุณุฑูุนุฉ:**
โข ุฅุฌูุงูู ุงููุณุชุฎุฏููู: {stats['users']['total']:,}
โข ูุดุท (24 ุณุงุนุฉ): {stats['users']['recent_24h']:,}
โข ูุนุงููุงุช ุงูููู: {stats['activity']['recent_transactions']:,}
โข ุตุงูู ุงูุฅูุฑุงุฏุงุช: {stats['financial']['net_revenue']:.2f} USD

๐ **ุฎุฏูุฉ CID:**
โข ุทูุจุงุช ููุชููุฉ: {stats['cid']['completed']:,}
โข ูุนุฏู ุงููุฌุงุญ: {stats['cid']['success_rate']}

๐ซ **ุงูููุจููุงุช:**
โข ูุดุทุฉ: {stats['vouchers']['active']:,}
โข ูุณุชุฎุฏูุฉ: {stats['vouchers']['used']:,}

๐ **ุขุฎุฑ ุชุญุฏูุซ**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

ุงุฎุชุฑ ุงูุนูููุฉ ุงูุชู ุชุฑูุฏ ุงูููุงู ุจูุง:"""
    
    def get_main_admin_keyboard(self) -> InlineKeyboardMarkup:
        """Get main admin panel keyboard"""
        keyboard = [
            [
                InlineKeyboardButton("๐ ุงูุฅุญุตุงุฆูุงุช", callback_data="admin_stats"),
                InlineKeyboardButton("๐ฅ ุฅุฏุงุฑุฉ ุงููุณุชุฎุฏููู", callback_data="admin_users")
            ],
            [
                InlineKeyboardButton("๐ซ ุฅุฏุงุฑุฉ ุงูููุจููุงุช", callback_data="admin_vouchers"),
                InlineKeyboardButton("๐ฆ ุฅุฏุงุฑุฉ ุงูุจุงูุงุช", callback_data="admin_packages")
            ],
            [
                InlineKeyboardButton("๐ฐ ุงููุนุงููุงุช ุงููุงููุฉ", callback_data="admin_transactions"),
                InlineKeyboardButton("๐ง ุฅุนุฏุงุฏุงุช ุงููุธุงู", callback_data="admin_settings")
            ],
            [
                InlineKeyboardButton("๐ ุณุฌู ุงูุฃูุดุทุฉ", callback_data="admin_logs"),
                InlineKeyboardButton("๐ ุชุญุฏูุซ ุงูุจูุงูุงุช", callback_data="admin_refresh")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_system_statistics(self) -> Dict:
        """Get comprehensive system statistics"""
        try:
            with db.get_session() as session:
                # User statistics
                total_users = session.query(User).count()
                active_users = session.query(User).filter(
                    User.last_activity >= datetime.utcnow() - timedelta(days=30)
                ).count()
                banned_users = session.query(User).filter(User.is_banned == True).count()
                
                # Financial statistics
                total_deposits = session.query(Transaction).filter(
                    Transaction.type == "usdt_deposit",
                    Transaction.status == "completed"
                ).all()
                
                total_deposit_amount = sum(t.amount_usd for t in total_deposits)
                
                # CID statistics
                total_cid_requests = session.query(CIDRequest).count()
                completed_cid_requests = session.query(CIDRequest).filter(
                    CIDRequest.status == "completed"
                ).count()
                failed_cid_requests = session.query(CIDRequest).filter(
                    CIDRequest.status == "failed"
                ).count()
                
                # Package sales
                package_sales = session.query(Transaction).filter(
                    Transaction.type == "cid_purchase",
                    Transaction.status == "completed",
                    Transaction.amount_cid > 0
                ).all()
                
                total_cid_sold = sum(t.amount_cid for t in package_sales)
                total_package_revenue = sum(abs(t.amount_usd) for t in package_sales)
                
                # Voucher statistics
                voucher_stats = voucher_service.get_voucher_stats()
                
                # Recent activity (last 24 hours)
                recent_cutoff = datetime.utcnow() - timedelta(hours=24)
                recent_users = session.query(User).filter(
                    User.last_activity >= recent_cutoff
                ).count()
                
                recent_transactions = session.query(Transaction).filter(
                    Transaction.created_at >= recent_cutoff
                ).count()
                
                return {
                    "users": {
                        "total": total_users,
                        "active": active_users,
                        "banned": banned_users,
                        "recent_24h": recent_users
                    },
                    "financial": {
                        "total_deposits": len(total_deposits),
                        "total_deposit_amount": total_deposit_amount,
                        "total_package_revenue": total_package_revenue,
                        "net_revenue": total_deposit_amount + total_package_revenue
                    },
                    "cid": {
                        "total_requests": total_cid_requests,
                        "completed": completed_cid_requests,
                        "failed": failed_cid_requests,
                        "success_rate": f"{(completed_cid_requests / max(1, total_cid_requests)) * 100:.1f}%",
                        "total_sold": total_cid_sold
                    },
                    "vouchers": voucher_stats,
                    "activity": {
                        "recent_users": recent_users,
                        "recent_transactions": recent_transactions
                    }
                }
                
        except Exception as e:
            logger.error(f"Failed to get system statistics: {e}")
            return {"error": str(e)}
    
    def get_user_management_stats(self) -> str:
        """Get user management statistics"""
        try:
            with db.get_session() as session:
                total_users = session.query(User).count()
                active_users = session.query(User).filter(
                    User.last_activity >= datetime.utcnow() - timedelta(days=30)
                ).count()
                banned_users = session.query(User).filter(User.is_banned == True).count()
                
                recent_users = session.query(User).filter(
                    User.registered_at >= datetime.utcnow() - timedelta(days=7)
                ).count()
                
                return f"""๐ **ุฅุญุตุงุฆูุงุช ุงููุณุชุฎุฏููู:**
โข ุฅุฌูุงูู ุงููุณุชุฎุฏููู: {total_users:,}
โข ูุดุท (30 ููู): {active_users:,}
โข ูุญุธูุฑ: {banned_users:,}
โข ุฌุฏูุฏ (7 ุฃูุงู): {recent_users:,}

โ๏ธ **ุงูุฅุฌุฑุงุกุงุช ุงููุชุงุญุฉ:**
โข ุญุธุฑ/ุฅูุบุงุก ุญุธุฑ ูุณุชุฎุฏู
โข ุชุนุฏูู ุฑุตูุฏ ุงููุณุชุฎุฏู
โข ุนุฑุถ ุชูุงุตูู ุงููุณุชุฎุฏู
โข ุฅุฑุณุงู ุฑุณุงูุฉ ูุฌููุน ุงููุณุชุฎุฏููู"""
                
        except Exception as e:
            return f"โ ุฎุทุฃ ูู ุฌูุจ ุจูุงูุงุช ุงููุณุชุฎุฏููู: {str(e)}"
    
    def get_transaction_stats(self) -> str:
        """Get transaction statistics"""
        try:
            with db.get_session() as session:
                # Recent transactions (last 24 hours)
                recent_cutoff = datetime.utcnow() - timedelta(hours=24)
                recent_txs = session.query(Transaction).filter(
                    Transaction.created_at >= recent_cutoff
                ).count()
                
                # Pending transactions
                pending_txs = session.query(Transaction).filter(
                    Transaction.status == "pending"
                ).count()
                
                # Failed transactions
                failed_txs = session.query(Transaction).filter(
                    Transaction.status == "failed"
                ).count()
                
                # Total revenue (last 30 days)
                month_cutoff = datetime.utcnow() - timedelta(days=30)
                recent_deposits = session.query(Transaction).filter(
                    Transaction.type == "usdt_deposit",
                    Transaction.status == "completed",
                    Transaction.created_at >= month_cutoff
                ).all()
                
                monthly_revenue = sum(abs(t.amount_usd) for t in recent_deposits)
                
                return f"""๐ฐ **ุฅุญุตุงุฆูุงุช ุงููุนุงููุงุช:**
โข ูุนุงููุงุช ุขุฎุฑ 24 ุณุงุนุฉ: {recent_txs:,}
โข ูุนุงููุงุช ูุนููุฉ: {pending_txs:,}
โข ูุนุงููุงุช ูุงุดูุฉ: {failed_txs:,}
โข ุฅูุฑุงุฏุงุช ุงูุดูุฑ: ${monthly_revenue:.2f}

๐ง **ุงูุฅุฌุฑุงุกุงุช ุงููุชุงุญุฉ:**
โข ูุฑุงุฌุนุฉ ุงููุนุงููุงุช ุงููุนููุฉ
โข ุฅุนุงุฏุฉ ูุนุงูุฌุฉ ุงููุนุงููุงุช ุงููุงุดูุฉ
โข ุชุตุฏูุฑ ุชูุฑูุฑ ุงููุนุงููุงุช
โข ุชุญุฏูุซ ุญุงูุฉ ุงููุนุงููุฉ ูุฏููุงู"""
                
        except Exception as e:
            return f"โ ุฎุทุฃ ูู ุฌูุจ ุจูุงูุงุช ุงููุนุงููุงุช: {str(e)}"
    
    def get_voucher_management_stats(self) -> str:
        """Get voucher management statistics"""
        try:
            voucher_stats = voucher_service.get_voucher_stats()
            
            return f"""๐ซ **ุฅุญุตุงุฆูุงุช ุงูููุจููุงุช:**
โข ุฅุฌูุงูู ุงูููุจููุงุช: {voucher_stats.get('total_vouchers', 0):,}
โข ูุณุชุฎุฏูุฉ: {voucher_stats.get('used_vouchers', 0):,}
โข ูุชุงุญุฉ: {voucher_stats.get('active_vouchers', 0):,}
โข ููุชููุฉ ุงูุตูุงุญูุฉ: {voucher_stats.get('expired_vouchers', 0):,}

๐ต **ุงูููู ุงููุงููุฉ:**
โข ุฅุฌูุงูู ูููุฉ ุงูููุจููุงุช: ${voucher_stats.get('total_value', 0):.2f}
โข ูููุฉ ูุณุชุฎุฏูุฉ: ${voucher_stats.get('used_value', 0):.2f}

โ๏ธ **ุงูุฅุฌุฑุงุกุงุช ุงููุชุงุญุฉ:**
โข ุฅูุดุงุก ููุจููุงุช ุฌุฏูุฏุฉ
โข ุฅูุบุงุก ููุจูู
โข ุนุฑุถ ุชูุงุตูู ุงูููุจูู
โข ุชุตุฏูุฑ ูุงุฆูุฉ ุงูููุจููุงุช"""
                
        except Exception as e:
            return f"โ ุฎุทุฃ ูู ุฌูุจ ุจูุงูุงุช ุงูููุจููุงุช: {str(e)}"
    
    def get_recent_logs(self) -> str:
        """Get recent system logs"""
        try:
            with db.get_session() as session:
                recent_logs = session.query(AdminLog).order_by(
                    AdminLog.created_at.desc()
                ).limit(10).all()
                
                if not recent_logs:
                    return "๐ **ุณุฌูุงุช ุงููุธุงู:**\n\nูุง ุชูุฌุฏ ุณุฌูุงุช ุญุฏูุซุฉ"
                
                logs_text = "๐ **ุขุฎุฑ 10 ุณุฌูุงุช:**\n\n"
                
                for log in recent_logs:
                    time_str = log.created_at.strftime("%m-%d %H:%M")
                    logs_text += f"๐ธ `{time_str}` - {log.action}\n"
                    if log.details:
                        logs_text += f"   โ {log.details[:50]}...\n"
                    logs_text += "\n"
                
                logs_text += "\nโ๏ธ **ุงูุฅุฌุฑุงุกุงุช ุงููุชุงุญุฉ:**\n"
                logs_text += "โข ุนุฑุถ ุงูุณุฌูุงุช ุงููุงููุฉ\n"
                logs_text += "โข ุชุตุฏูุฑ ุงูุณุฌูุงุช\n"
                logs_text += "โข ูุณุญ ุงูุณุฌูุงุช ุงููุฏููุฉ"
                
                return logs_text
                
        except Exception as e:
            return f"โ ุฎุทุฃ ูู ุฌูุจ ุงูุณุฌูุงุช: {str(e)}"
    
    def format_statistics_message(self) -> str:
        """Format system statistics for display"""
        stats = self.get_system_statistics()
        
        if "error" in stats:
            return f"โ ุฎุทุฃ ูู ุฌูุจ ุงูุฅุญุตุงุฆูุงุช: {stats['error']}"
        
        message = f"""
๐ **ุฅุญุตุงุฆูุงุช ุงููุธุงู**
โโโโโโโโโโโโโโโโโโโโโ

๐ฅ **ุงููุณุชุฎุฏููู**:
โข ุฅุฌูุงูู ุงููุณุชุฎุฏููู: {stats['users']['total']:,}
โข ูุดุท (30 ููู): {stats['users']['active']:,}
โข ูุญุธูุฑ: {stats['users']['banned']:,}
โข ูุดุงุท (24 ุณุงุนุฉ): {stats['users']['recent_24h']:,}

๐ฐ **ุงูุฅุญุตุงุฆูุงุช ุงููุงููุฉ**:
โข ุฅุฌูุงูู ุงูุฅูุฏุงุนุงุช: {stats['financial']['total_deposits']:,}
โข ูุจูุบ ุงูุฅูุฏุงุนุงุช: {stats['financial']['total_deposit_amount']:.2f} USD
โข ุฅูุฑุงุฏุงุช ุงูุจุงูุงุช: {stats['financial']['total_package_revenue']:.2f} USD
โข ุตุงูู ุงูุฅูุฑุงุฏุงุช: {stats['financial']['net_revenue']:.2f} USD

๐ **ุฎุฏูุฉ CID**:
โข ุฅุฌูุงูู ุงูุทูุจุงุช: {stats['cid']['total_requests']:,}
โข ููุชููุฉ: {stats['cid']['completed']:,}
โข ูุงุดูุฉ: {stats['cid']['failed']:,}
โข ูุนุฏู ุงููุฌุงุญ: {stats['cid']['success_rate']}
โข CID ูุจุงุน: {stats['cid']['total_sold']:,}

๐ซ **ุงูููุจููุงุช**:
โข ุฅุฌูุงูู ุงูููุฏุงุช: {stats['vouchers']['total']:,}
โข ูุณุชุฎุฏูุฉ: {stats['vouchers']['used']:,}
โข ูุดุทุฉ: {stats['vouchers']['active']:,}
โข ููุชููุฉ ุงูุตูุงุญูุฉ: {stats['vouchers']['expired']:,}

๐ **ุงููุดุงุท ุงูุญุฏูุซ (24 ุณุงุนุฉ)**:
โข ูุณุชุฎุฏููู ูุดุทูู: {stats['activity']['recent_users']:,}
โข ูุนุงููุงุช ุฌุฏูุฏุฉ: {stats['activity']['recent_transactions']:,}

๐ **ุขุฎุฑ ุชุญุฏูุซ**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
        
        return message
    
    def get_user_management_keyboard(self) -> InlineKeyboardMarkup:
        """Get user management keyboard"""
        keyboard = [
            [
                InlineKeyboardButton("๐ ุงูุจุญุซ ุนู ูุณุชุฎุฏู", callback_data="admin_search_user"),
                InlineKeyboardButton("๐ ูุงุฆูุฉ ุงูุฃุฏูู", callback_data="admin_list_admins")
            ],
            [
                InlineKeyboardButton("๐ ุฃูุถู ุงููุณุชุฎุฏููู", callback_data="admin_top_users"),
                InlineKeyboardButton("โ ุงููุณุชุฎุฏููู ุงููุญุธูุฑูู", callback_data="admin_banned_users")
            ],
            [
                InlineKeyboardButton("๐ฐ ุชุนุฏูู ุงูุฑุตูุฏ", callback_data="admin_adjust_balance"),
                InlineKeyboardButton("๐ ุญุธุฑ/ุฅูุบุงุก ุญุธุฑ", callback_data="admin_ban_user")
            ],
            [
                InlineKeyboardButton("๐ ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ", callback_data="admin_main")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_voucher_management_keyboard(self) -> InlineKeyboardMarkup:
        """Get voucher management keyboard"""
        keyboard = [
            [
                InlineKeyboardButton("โ ุฅูุดุงุก ููุฏ ูุงุญุฏ", callback_data="admin_create_voucher"),
                InlineKeyboardButton("๐ฆ ุฅูุดุงุก ููุฏุงุช ูุชุนุฏุฏุฉ", callback_data="admin_bulk_vouchers")
            ],
            [
                InlineKeyboardButton("๐ ุงูุจุญุซ ุนู ููุฏ", callback_data="admin_search_voucher"),
                InlineKeyboardButton("๐ ุฅุญุตุงุฆูุงุช ุงูููุฏุงุช", callback_data="admin_voucher_stats")
            ],
            [
                InlineKeyboardButton("๐ ุขุฎุฑ ุงูููุฏุงุช ุงูููุดุฃุฉ", callback_data="admin_recent_vouchers"),
                InlineKeyboardButton("โฐ ุงูููุฏุงุช ููุชููุฉ ุงูุตูุงุญูุฉ", callback_data="admin_expired_vouchers")
            ],
            [
                InlineKeyboardButton("๐ ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ", callback_data="admin_main")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_transaction_management_keyboard(self) -> InlineKeyboardMarkup:
        """Get transaction management keyboard"""
        keyboard = [
            [
                InlineKeyboardButton("๐ฐ ุขุฎุฑ ุงูุฅูุฏุงุนุงุช", callback_data="admin_recent_deposits"),
                InlineKeyboardButton("๐ ุขุฎุฑ ุงููุดุชุฑูุงุช", callback_data="admin_recent_purchases")
            ],
            [
                InlineKeyboardButton("โ ุงููุนุงููุงุช ุงููุงุดูุฉ", callback_data="admin_failed_transactions"),
                InlineKeyboardButton("โณ ุงููุนุงููุงุช ุงููุนููุฉ", callback_data="admin_pending_transactions")
            ],
            [
                InlineKeyboardButton("๐ ุชูุฑูุฑ ูุงูู", callback_data="admin_financial_report"),
                InlineKeyboardButton("๐ ุงูุจุญุซ ูู ุงููุนุงููุงุช", callback_data="admin_search_transaction")
            ],
            [
                InlineKeyboardButton("๐ ุงูุนูุฏุฉ ูููุงุฆูุฉ ุงูุฑุฆูุณูุฉ", callback_data="admin_main")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    def get_recent_transactions(self, transaction_type: str = None, limit: int = 10) -> List[Transaction]:
        """Get recent transactions"""
        try:
            with db.get_session() as session:
                query = session.query(Transaction)
                
                if transaction_type:
                    query = query.filter(Transaction.type == transaction_type)
                
                transactions = query.order_by(Transaction.created_at.desc()).limit(limit).all()
                return transactions
        except Exception as e:
            logger.error(f"Failed to get recent transactions: {e}")
            return []
    
    def format_transaction_list(self, transactions: List[Transaction], title: str) -> str:
        """Format transaction list for display"""
        if not transactions:
            return f"๐ **{title}**\n\nูุง ุชูุฌุฏ ูุนุงููุงุช"
        
        message = f"๐ **{title}**\n\n"
        
        for i, tx in enumerate(transactions, 1):
            user_name = "ุบูุฑ ูุนุฑูู"
            try:
                with db.get_session() as session:
                    user = session.query(User).filter_by(id=tx.user_id).first()
                    if user:
                        user_name = user.username or f"User {user.user_id}"
            except:
                pass
            
            status_emoji = {"completed": "โ", "pending": "โณ", "failed": "โ"}.get(tx.status, "โ")
            type_emoji = {
                "usdt_deposit": "๐ฐ",
                "cid_purchase": "๐",
                "voucher_redeem": "๐ซ"
            }.get(tx.type, "๐")
            
            message += f"""
{i}. {type_emoji} {status_emoji} **{user_name}**
   ๐ต ูุจูุบ: {tx.amount_usd:.2f} USD
   ๐ CID: {tx.amount_cid}
   ๐ {tx.created_at.strftime('%Y-%m-%d %H:%M')}
   
"""
        
        return message
    
    def get_admin_logs(self, limit: int = 20) -> List[AdminLog]:
        """Get recent admin logs"""
        try:
            with db.get_session() as session:
                logs = session.query(AdminLog).order_by(AdminLog.created_at.desc()).limit(limit).all()
                return logs
        except Exception as e:
            logger.error(f"Failed to get admin logs: {e}")
            return []
    
    def format_admin_logs(self) -> str:
        """Format admin logs for display"""
        logs = self.get_admin_logs()
        
        if not logs:
            return "๐ **ุณุฌู ุฃูุดุทุฉ ุงูุฃุฏูู**\n\nูุง ุชูุฌุฏ ุฃูุดุทุฉ ูุณุฌูุฉ"
        
        message = "๐ **ุณุฌู ุฃูุดุทุฉ ุงูุฃุฏูู**\n\n"
        
        for i, log in enumerate(logs, 1):
            admin_name = f"Admin {log.admin_user_id}"
            target_info = f" -> User {log.target_user_id}" if log.target_user_id else ""
            
            message += f"""
{i}. ๐ค **{admin_name}**
   ๐ง ุงูุนูููุฉ: {log.action}
   ๐ฏ ุงููุฏู: {target_info}
   ๐ ุงูุชูุงุตูู: {log.details or 'ูุง ุชูุฌุฏ ุชูุงุตูู'}
   ๐ {log.created_at.strftime('%Y-%m-%d %H:%M')}
   
"""
        
        return message
    
    def log_admin_action(self, admin_id: int, action: str, target_user_id: int = None, details: str = None):
        """Log admin action"""
        db.log_admin_action(admin_id, action, target_user_id, details)
    
    def adjust_user_balance(self, admin_id: int, target_user_id: int, cid_amount: int = 0, usd_amount: float = 0.0, reason: str = "") -> Tuple[bool, str]:
        """Adjust user balance (admin function)"""
        try:
            # Get user info for logging
            with db.get_session() as session:
                user = session.query(User).filter_by(user_id=target_user_id).first()
                if not user:
                    return False, "ุงููุณุชุฎุฏู ุบูุฑ ููุฌูุฏ"
                
                old_cid = user.balance_cid
                old_usd = user.balance_usd
            
            # Update balance
            success = db.update_user_balance(target_user_id, cid_amount, usd_amount)
            
            if success:
                # Create transaction record
                db.create_transaction(
                    user_id=target_user_id,
                    transaction_type="admin_adjust",
                    amount_usd=usd_amount,
                    amount_cid=cid_amount,
                    status="completed",
                    description=f"Admin balance adjustment: {reason}"
                )
                
                # Log admin action
                self.log_admin_action(
                    admin_id=admin_id,
                    action="balance_adjustment",
                    target_user_id=target_user_id,
                    details=f"CID: {old_cid} -> {old_cid + cid_amount}, USD: {old_usd:.2f} -> {old_usd + usd_amount:.2f}. Reason: {reason}"
                )
                
                return True, f"ุชู ุชุนุฏูู ุฑุตูุฏ ุงููุณุชุฎุฏู {target_user_id} ุจูุฌุงุญ"
            else:
                return False, "ูุดู ูู ุชุนุฏูู ุงูุฑุตูุฏ"
                
        except Exception as e:
            logger.error(f"Failed to adjust user balance: {e}")
            return False, f"ุฎุทุฃ ูู ุชุนุฏูู ุงูุฑุตูุฏ: {str(e)}"
    
    def ban_user(self, admin_id: int, target_user_id: int, ban: bool = True, reason: str = "") -> Tuple[bool, str]:
        """Ban or unban user"""
        try:
            with db.get_session() as session:
                user = session.query(User).filter_by(user_id=target_user_id).first()
                if not user:
                    return False, "ุงููุณุชุฎุฏู ุบูุฑ ููุฌูุฏ"
                
                old_status = user.is_banned
                user.is_banned = ban
                session.commit()
                
                action = "ban_user" if ban else "unban_user"
                status_text = "ูุญุธูุฑ" if ban else "ุบูุฑ ูุญุธูุฑ"
                
                self.log_admin_action(
                    admin_id=admin_id,
                    action=action,
                    target_user_id=target_user_id,
                    details=f"Status changed from {old_status} to {ban}. Reason: {reason}"
                )
                
                return True, f"ุชู {'ุญุธุฑ' if ban else 'ุฅูุบุงุก ุญุธุฑ'} ุงููุณุชุฎุฏู {target_user_id}"
                
        except Exception as e:
            logger.error(f"Failed to ban/unban user: {e}")
            return False, f"ุฎุทุฃ ูู {'ุญุธุฑ' if ban else 'ุฅูุบุงุก ุญุธุฑ'} ุงููุณุชุฎุฏู: {str(e)}"

# Global admin panel instance
admin_panel = AdminPanel()
